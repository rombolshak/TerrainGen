<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>TerrainGenerator</name>
  </assembly>
  <members>
    <member name="N:TerrainGen.Serialization">
    </member>
    <member name="T:TerrainGen.Serialization.SerializeReader">
    </member>
    <member name="M:TerrainGen.Serialization.SerializeReader.#ctor(dynamic)">
      <summary>
Инициализирует новый объекта класса <see cref="T:TerrainGen.Serialization.SerializeReader" /></summary>
      <remarks>
На роль <b>Reader</b> подходят, к примеру, <see cref="T:System.IO.BinaryReader" /> или <see cref="T:System.IO.StreamReader" />. Вообще же говоря, реализация собственно чтения зависит только от реализации класса десериализатора, поэтому строгих ограничений нет</remarks>
      <param name="reader">
Любой объекта, реализующий методы чтения</param>
    </member>
    <member name="M:TerrainGen.Serialization.SerializeReader.Open">
      <summary>
Открывает файл, в соответствии с предназначением класса: для десериализации на чтение, для сериализации -- на запись</summary>
      <returns>
<para><b>true</b>, если открытие прошло успешно;</para> <para><b>false</b> в противном случае</para></returns>
    </member>
    <member name="M:TerrainGen.Serialization.SerializeReader.Close">
      <summary>
Обеспечивает корректное закрытие файла</summary>
      <remarks>
Метод всегда завершается успешно, но для единообразия сигнатур возвращает bool</remarks>
      <returns>
true</returns>
    </member>
    <member name="M:TerrainGen.Serialization.SerializeReader.InOut(System.String@)">
      <summary>
Обеспечивает вывод строки из объекта десериализатора</summary>
      <returns>
<para><b>true</b>, если удалось получить строку, и <b>false</b> в противном случае</para></returns>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Boolean@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Double@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Single@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Int32@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(TerrainGen.Serialization.SpecialChars)">
InOut</seealso>
      <param name="str">
Строка, значение в которую будет записано при десериализации</param>
    </member>
    <member name="M:TerrainGen.Serialization.SerializeReader.InOut(System.Int32@)">
      <summary>
Обеспечивает вывод объекта типа Int32 из объекта десериализатора</summary>
      <returns>
<para><b>true</b>, если текущим элементом в десереализаторе является число или объекта, который можно привести к числу целочисленного типа, и <b>false</b> в противном случае</para></returns>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Boolean@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Double@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Single@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.String@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(TerrainGen.Serialization.SpecialChars)">
InOut</seealso>
      <param name="i">
Число целочисленного типа, значение в которое будет записано при десериализации</param>
    </member>
    <member name="M:TerrainGen.Serialization.SerializeReader.InOut(System.Double@)">
      <summary>
Обеспечивает вывод объекта типа Double из объекта десериализатора</summary>
      <returns>
<para><b>true</b>, если текущим элементом в десереализаторе является число или объекта, который можно привести к числу типа Double, и <b>false</b> в противном случае</para></returns>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Boolean@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Int32@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Single@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.String@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(TerrainGen.Serialization.SpecialChars)">
InOut</seealso>
      <param name="d">
Число с плавающей точкой двойной точности, значение в которое будет записано при десериализации</param>
    </member>
    <member name="M:TerrainGen.Serialization.SerializeReader.InOut(System.Single@)">
      <summary>
Обеспечивает вывод объекта типа Single из объекта десериализатора</summary>
      <returns>
<para><b>true</b>, если текущим элементом в десереализаторе является число или объекта, который можно привести к числу типа Single, и <b>false</b> в противном случае</para></returns>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Boolean@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Double@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Int32@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.String@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(TerrainGen.Serialization.SpecialChars)">
InOut</seealso>
      <param name="f">
Число с плавающей точкой, значение в которое будет записано при десериализации</param>
    </member>
    <member name="M:TerrainGen.Serialization.SerializeReader.InOut(System.Boolean@)">
      <summary>
Обеспечивает вывод булева значения из объекта десериализатора</summary>
      <returns>
<para><b>true</b>, если текущим элементом в десереализаторе является булево значение, либо строка, значение которой можно интепретировать как булево значение, и <b>false</b> в противном случае</para></returns>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Int32@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Double@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Single@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.String@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(TerrainGen.Serialization.SpecialChars)">
InOut</seealso>
      <param name="b">
Переменная типа bool, значение которой будет записано при десериализации</param>
    </member>
    <member name="M:TerrainGen.Serialization.SerializeReader.InOut(TerrainGen.Serialization.SpecialChars)">
      <summary>
Обеспечивает вывод специальных маркеров из объекта десериализатора</summary>
      <returns>
<para><b>true</b>, если текущим элементом в десереализаторе является указанный (а не любой) маркер, и <b>false</b> в противном случае</para></returns>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Boolean@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Double@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Single@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.String@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Int32@)">
InOut</seealso>
      <param name="ch">
Маркер, являющийся элементом перечесления <see cref="SpecialChars" />, значение в которое будет записано при десериализации</param>
    </member>
    <member name="M:TerrainGen.Serialization.SerializeReader.InOut(TerrainGen.Serialization.SpecialChars,System.Boolean)">
      <summary>
Обеспечивает вывод специальных маркеров из объекта десериализатора</summary>
      <returns>
<para><b>true</b>, если текущим элементом в десереализаторе является указанный (а не любой) маркер, и <b>false</b> в противном случае</para></returns>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Boolean@)">
Boolean@)</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Double@)">
Double@)</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Single@)">
Single@)</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.String@)">
String@)</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Int32@)">
Int32@)</seealso>
      <param name="ch">
Маркер, являющийся элементом перечесления <see cref="SpecialChars" />, значение в которое будет записано при десериализации</param>
      <param name="delete">
Если <b>true </b>(по умолчанию), то объекта будет удален после чтения. Иначе же при следующем обращении на чтение к экземпляру данного класса будет выдан тот же самый объекта</param>
    </member>
    <member name="M:TerrainGen.Serialization.SerializeReader.TestCurrentSpecialChar">
      <summary>
Возвращает текущий специальный символ</summary>
    </member>
    <member name="N:TerrainGen">
    </member>
    <member name="T:TerrainGen.Camera">
      <summary>
Содержит все необходимые методы для управления движением камеры</summary>
    </member>
    <member name="M:TerrainGen.Camera.PositionCamera(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
Устанавливает позицию камеры на заданном месте</summary>
      <remarks>
Предполагается, что последние три параметры будут равны 0, 1, 0</remarks>
      <param name="posX">
Позиция камеры по координате X</param>
      <param name="posY">
Позиция камеры по координате Y (высота)</param>
      <param name="posZ">
Позиция камеры по координате Z (глубина)</param>
      <param name="viewX">
Координата Х точки взгляда камеры</param>
      <param name="viewY">
Координата Y точки взгляда камеры (высота)</param>
      <param name="viewZ">
Координата Z точки взгляда камеры (глубина)</param>
      <param name="upX">
Х-компонента вектора высоты</param>
      <param name="upY">
Y-компонента вектора высоты</param>
      <param name="upZ">
Z-компонента вектора высоты</param>
    </member>
    <member name="M:TerrainGen.Camera.RotateView(System.Single)">
      <summary>
Поворачивает камеру с указанной скоростью</summary>
      <remarks>
Поворот происходит в горизонтальной плоскости. Для поворота вверх/вниз используйте <see cref="M:TerrainGen.Camera.UpDown(System.Single)" /></remarks>
      <param name="speed">
Скорость, с которой происходит поворот</param>
    </member>
    <member name="M:TerrainGen.Camera.MoveCamera(System.Single)">
      <summary>
Двигает камеру в направлении взгляда с указанной скоростью</summary>
      <param name="speed">
Скорость, с которой происходит движение. Если значение отрицательно, происходит движение назад</param>
    </member>
    <member name="M:TerrainGen.Camera.Strafe(System.Single)">
      <summary>
Двигает камеру вбок с указанной скоростью</summary>
      <param name="speed">
Скорость движения камеры. Если значение положительно, то происходит движение вправо, иначе влево</param>
    </member>
    <member name="M:TerrainGen.Camera.Update">
      <summary>
Обновляет камеру. Необходимо вызывать этот метод каждый раз при отрисовке сцены</summary>
    </member>
    <member name="M:TerrainGen.Camera.UpDown(System.Single)">
      <summary>
Задает поворот камеры вверх/вниз</summary>
      <param name="speed">
Скорость, с которой происходит вращение. При отрицательном значении поворот происходит вверх, иначе вниз</param>
    </member>
    <member name="M:TerrainGen.Camera.MoveUpDown(System.Single)">
      <summary>
Двигает камеру с указанной скоростью в вертикальной плоскости</summary>
      <param name="speed">
Скорость движения. Если положительна, движение происходит вверх, иначе вниз</param>
    </member>
    <member name="M:TerrainGen.Camera.Look">
      <summary>
Применяет все ранее сделанные модификации положения камеры. До вызова этого метода никакой другой не возымеет эффекта</summary>
    </member>
    <member name="M:TerrainGen.Camera.GetPosX">
      <summary>
Возвращает позицию камеры по Х</summary>
    </member>
    <member name="M:TerrainGen.Camera.GetPosY">
      <summary>
Возвращает позицию камеры по Y</summary>
    </member>
    <member name="M:TerrainGen.Camera.GetPosZ">
      <summary>
Возвращает позицию камеры по Z</summary>
    </member>
    <member name="M:TerrainGen.Camera.GetViewX">
      <summary>
Возвращает позицию взгляда по Х</summary>
    </member>
    <member name="M:TerrainGen.Camera.GetViewY">
      <summary>
Возвращает позицию взгляда по Y</summary>
    </member>
    <member name="M:TerrainGen.Camera.GetViewZ">
      <summary>
Возвращает позицию взгляда по Z</summary>
    </member>
    <member name="T:TerrainGen.FrustrumCuller">
      <summary>
Предоставляет методы для реализации алгоритма отсечения невидимых областей</summary>
      <remarks>
Не используйте этот класс. Он несовершенен. Ну и не работает, как положено</remarks>
    </member>
    <member name="M:TerrainGen.FrustrumCuller.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:TerrainGen.FrustrumCuller" /> class.</summary>
    </member>
    <member name="M:TerrainGen.FrustrumCuller.BoundaryInFrustrum(TerrainGen.Boundary)">
      <summary>
Проверяет, входит ли указанный объем в текущую область видимости</summary>
      <returns>
<para><b>0</b>, если объем не содержится в области видимости,</para> <para><b>1</b>, если содержится частично,</para> <para><b>2</b>, если содержится полностью</para></returns>
      <param name="boundary">
Объем ограничивающий что-либо в пространстве</param>
    </member>
    <member name="M:TerrainGen.FrustrumCuller.RenderTree(TerrainGen.QuadTree,System.Int32)">
      <summary>
Описывает указанное дерево, подготавливая индексы вершин для отрисовки</summary>
      <remarks>
Этот метод работает крайне разочаровывающе. Не используйте его, рисуйте все вершины</remarks>
      <returns>
Список индексов вершин, в том порядке, в котором необходимо их отрисовать</returns>
      <param name="tree">
Дерево, описывающее необходимую часть ландшафта</param>
      <param name="mapSize">
Размер карты</param>
    </member>
    <member name="T:TerrainGen.Serialization.JsonSerializer">
      <summary>
Предоставляет методы для сохранения файлов настроек формате JSON</summary>
      <seealso cref="T:TerrainGen.Serialization.JsonDeserializer">
JsonDeserializer</seealso>
      <seealso cref="T:TerrainGen.Serialization.BinarySerializer">
BinarySerializer</seealso>
    </member>
    <member name="M:TerrainGen.Serialization.JsonSerializer.#ctor(System.String)">
      <summary>
Initializes a new instance of the <see cref="T:TerrainGen.Serialization.JsonSerializer" /> class.</summary>
      <param name="filename">
Путь к файлу, в который будет производиться сохранение данных</param>
      <exception cref="IOException">
Файл используется другим процессом</exception>
    </member>
    <member name="M:TerrainGen.Serialization.JsonSerializer.Open">
      <summary>
Производит открытие файла</summary>
      <remarks>
Формальная реализация интерфейса</remarks>
      <returns>
<b>true</b></returns>
    </member>
    <member name="M:TerrainGen.Serialization.JsonSerializer.Close">
      <summary>
Обеспечивает корректное закрытие файла</summary>
      <returns>
true</returns>
    </member>
    <member name="M:TerrainGen.Serialization.JsonSerializer.InOut(System.String@)">
      <summary>
Обеспечивает запись строки</summary>
      <returns>
<b>true</b>, если запись прошла успешно, <b>false</b> в противном случае</returns>
      <param name="str">
Строка, значение которой будет записано</param>
    </member>
    <member name="M:TerrainGen.Serialization.JsonSerializer.InOut(System.Int32@)">
      <summary>
Обеспечивает запись числа целочисленного типа</summary>
      <returns>
<b>true</b>, если запись прошла успешно, <b>false</b> в противном случае</returns>
      <param name="i">
Число, значение которого будет записано</param>
    </member>
    <member name="M:TerrainGen.Serialization.JsonSerializer.InOut(System.Double@)">
      <summary>
Обеспечивает запись числа с плавающей точкой двойной точности</summary>
      <returns>
<b>true</b>, если запись прошла успешно, <b>false</b> в противном случае</returns>
      <param name="d">
Число, значение которого будет записано</param>
    </member>
    <member name="M:TerrainGen.Serialization.JsonSerializer.InOut(System.Single@)">
      <summary>
Обеспечивает запись числа с плавающей точкой</summary>
      <returns>
<b>true</b>, если запись прошла успешно, <b>false</b> в противном случае</returns>
      <param name="f">
Число, значение которого будет записано</param>
    </member>
    <member name="M:TerrainGen.Serialization.JsonSerializer.InOut(System.Boolean@)">
      <summary>
Обеспечивает запись булева значения</summary>
      <returns>
<b>true</b>, если запись прошла успешно, <b>false</b> в противном случае</returns>
      <param name="b">
Значение, которое необходимо записать</param>
    </member>
    <member name="M:TerrainGen.Serialization.JsonSerializer.InOut(TerrainGen.Serialization.SpecialChars)">
      <summary>
Обеспечивает запись одного из специальных маркеров</summary>
      <returns>
<b>true</b>, если запись прошла успешно, <b>false</b> в противном случае</returns>
      <param name="ch">
Маркер, который нужно записать</param>
    </member>
    <member name="M:TerrainGen.Serialization.JsonSerializer.WriteName(System.String)">
      <summary>
Записывает указанную строку</summary>
      <returns>
<b>true</b>, если запись прошла успешно, <b>false</b> в противном случае</returns>
      <param name="name">
Строка, которая будет записана</param>
    </member>
    <member name="T:TerrainGen.Program">
    </member>
    <member name="T:TerrainGen.SimpleSetting">
      <summary>
Представляет какой-либо <b>один</b> параметр сцены</summary>
    </member>
    <member name="P:TerrainGen.SimpleSetting.Name">
      <summary>
Получает или задает имя параметра</summary>
    </member>
    <member name="P:TerrainGen.SimpleSetting.Type">
      <summary>
Получает или задает тип параметра</summary>
    </member>
    <member name="P:TerrainGen.SimpleSetting.Obj">
      <summary>
Получает или задает само значение параметра</summary>
      <remarks>
При задании значения параметра необходимо вручную обновить и значение типа, если оно отличается от того, что было. Вообще же, необходимости изменять и передавать куда-либо дальше объект этого класса не должно возникнуть</remarks>
    </member>
    <member name="T:TerrainGen.Settings">
      <summary>
Представляет класс настроек приложения, описывающих различные параметры генерации и отображения сцены</summary>
      <remarks>
Следующий код показывает основные приемы работы с данным классом <code lang="C#">Settings set = new Settings();
set["name"] = "Alex";
set["age"] = 19;
set["phones"] = new string[] {"123-45-67", "987-65-43"};

Console.WriteLine(set.Exists("qweqwe")); // false
Console.WriteLine(set.Exists("name")); // true
Console.WriteLine(set.GetTypeByName("age").ToString()); // System.Int32
Console.WriteLine( ((string[]) set.Get("phones"))[0] ); // 123-45-67
Console.WriteLine(set["phones"][0]); // 123-45-67
Console.WriteLine("{0}, {1} years, work phone {3}", set["name"], set["age"] + 1,
set["phones][1]); // Alex, 20 years, work phone 987-65-43
</code></remarks>
    </member>
    <member name="M:TerrainGen.Settings.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:TerrainGen.Settings" /> class.</summary>
    </member>
    <member name="M:TerrainGen.Settings.Exists(System.String)">
      <summary>
Проверяет, существует ли в текущем экземпляре объекта параметр с заданным именем</summary>
      <remarks>
Перед вызовом любых других функций, принимающих имя параметра рекомендуется вызывать этот метод во избежание возниконовения исключений</remarks>
      <returns>
<see langword="true" />, если параметр найден, и <see langword="false" /> в противном случае</returns>
      <param name="name">
Имя проверяемого параметра</param>
    </member>
    <member name="M:TerrainGen.Settings.GetTypeByName(System.String)">
      <summary>
Возвращает тип объекта с указанным именем</summary>
      <returns>
Тип объекта, если таковой найден, <see langword="null" /> в противном случае</returns>
      <param name="name">
Имя параметра, чей тип необходимо узнать</param>
    </member>
    <member name="M:TerrainGen.Settings.Get(System.String)">
      <summary>
Возвращает значение параметра с указанным именем</summary>
      <returns>
<see langword="null" />, если значение не найдено</returns>
      <param name="name">
Имя параметра</param>
    </member>
    <member name="M:TerrainGen.Settings.Set(System.String,System.Type,System.Object)">
      <summary>
Заносит новое значение либо обновляет старое</summary>
      <remarks>
Для простоты использования рекомендуется пользоваться индексатором, в таком случае не нужно заботиться о типах значений</remarks>
      <param name="name">
Имя параметра</param>
      <param name="type">
Тип значения</param>
      <param name="obj">
Значение параметра</param>
    </member>
    <member name="P:TerrainGen.Settings.Item(System.String)">
      <summary>
Получает или задает значение параметра по заданному имени</summary>
      <remarks>
Следующий код показывает основные приемы работы с данным классом <code lang="C#">Settings set = new Settings();
set["name"] = "Alex";
set["age"] = 19;
set["phones"] = new string[] {"123-45-67", "987-65-43"};

Console.WriteLine(set.Exists("qweqwe")); // false
Console.WriteLine(set.Exists("name")); // true
Console.WriteLine(set.GetTypeByName("age").ToString()); // System.Int32
Console.WriteLine( ((string[]) set.Get("phones"))[0] ); // 123-45-67
Console.WriteLine(set["phones"][0]); // 123-45-67
Console.WriteLine("{0}, {1} years, work phone {3}", set["name"], set["age"] + 1,
set["phones][1]); // Alex, 20 years, work phone 987-65-43
</code></remarks>
      <param name="name">
Имя параметра</param>
    </member>
    <member name="P:TerrainGen.Settings.Names">
      <summary>
Получает имена всех параметров, занесенных в объект на текущий момент</summary>
    </member>
    <member name="M:TerrainGen.Settings.MergeWith(TerrainGen.Settings[])">
      <summary>
Производит слияние текущих настроек с какими-либо другими</summary>
      <returns>
Настройки с обновленными значениями и добавленными новыми</returns>
      <param name="sets">
Новые настройки</param>
    </member>
    <member name="M:TerrainGen.Settings.Merge(TerrainGen.Settings,TerrainGen.Settings[])">
      <summary>
Сливает несколько объектов настроек в один</summary>
      <param name="set1">
Начальные настройки</param>
      <param name="sets">
Настройки, с которыми производится слияние</param>
    </member>
    <member name="M:TerrainGen.Settings.Serialize(TerrainGen.Serialization.ISerializer)">
      <summary>
Производит сериализацию либо десериализацию настроек</summary>
      <remarks>
Несмотря на то, что метод принимает объект, реализующий <see cref="T:TerrainGen.Serialization.ISerializer" />, фактически требуется наследование класса <see cref="T:TerrainGen.Serialization.SerializeWriter" /> для сериализации или <see cref="T:TerrainGen.Serialization.SerializeReader" /> для десериализации. Предполагается, что методы <see cref="M:TerrainGen.Serialization.ISerializer.Open" /> и <see cref="M:TerrainGen.Serialization.ISerializer.Close" /> будут вызваны кодом, вызвавшим и этот метод</remarks>
      <returns>
<see langword="true" />, если операция завершилась успешно, иначе <see langword="false" /></returns>
      <param name="serializer">
Сериализатор, определяющий, в каком формате и куда записывать/считывать настройки</param>
    </member>
    <member name="M:TerrainGen.Settings.GetEnumerator">
    </member>
    <member name="N:TerrainGen.HeightMap">
    </member>
    <member name="T:TerrainGen.HeightMap.FactorialModel">
      <summary>
Представляет карту высот, сгенерированную по diamond-square алгоритму</summary>
    </member>
    <member name="M:TerrainGen.HeightMap.FactorialModel.#ctor(TerrainGen.Settings)">
      <summary>
Генерирует новую карту высот с заданными настройками</summary>
      <param name="s">
<para>Настройки, использумые для генерации карты. Необходимо наличие следующих значений: </para> <list type="bullet"><item><description>int size -- размер карты</description></item><item><description>int seed -- зерно генератора псевдослучайных чисел</description></item><item><description>double roughness -- т.н. "шероховатость" ландшафта</description></item><item><description>int waterlevel -- уровень воды</description></item></list></param>
    </member>
    <member name="M:TerrainGen.HeightMap.FactorialModel.GetMap">
      <summary>
Возвращает карту высот</summary>
      <returns>
Карта высот в виде двумерного массива, значения лежат в промежутке [0; 255]</returns>
    </member>
    <member name="T:TerrainGen.AdvancedOptionsForm">
      <summary>
Форма расширенных настроек</summary>
    </member>
    <member name="M:TerrainGen.AdvancedOptionsForm.#ctor(TerrainGen.Settings)">
      <param name="settings">
</param>
    </member>
    <member name="T:TerrainGen.MainForm">
      <summary>
Главная форма приложения</summary>
    </member>
    <member name="M:TerrainGen.MainForm.Dispose(System.Boolean)">
      <summary>
Clean up any resources being used.</summary>
      <param name="disposing">
true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:TerrainGen.Color">
      <summary>
Представляет любой цвет в формате RGBA</summary>
    </member>
    <member name="P:TerrainGen.Color.R">
      <summary>
Получает или задает красную компоненту цвета</summary>
    </member>
    <member name="P:TerrainGen.Color.G">
      <summary>
Получает или задает зеленую компоненту цвета</summary>
    </member>
    <member name="P:TerrainGen.Color.B">
      <summary>
Получает или задает синюю компоненту цвета</summary>
    </member>
    <member name="P:TerrainGen.Color.A">
      <summary>
Получает или задает прозрачность цвета</summary>
    </member>
    <member name="P:TerrainGen.Color.Rf">
      <summary>
Получает или задает красную компоненту цвета</summary>
    </member>
    <member name="P:TerrainGen.Color.Gf">
      <summary>
Получает или задает зеленую компоненту цвета</summary>
    </member>
    <member name="P:TerrainGen.Color.Bf">
      <summary>
Получает или задает синюю компоненту цвета</summary>
    </member>
    <member name="P:TerrainGen.Color.Af">
    </member>
    <member name="M:TerrainGen.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
Initializes a new instance of the <see cref="T:TerrainGen.Color" /> class.</summary>
      <param name="r">
Красная компонента цвета. Число от 0 до 255</param>
      <param name="g">
Зеленая компонента цвета. Число от 0 до 255</param>
      <param name="b">
Синяя компонента цвета. Число от 0 до 255</param>
      <param name="a">
Прозрачность. Значение по-умолчанию 255.</param>
    </member>
    <member name="M:TerrainGen.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
Initializes a new instance of the <see cref="T:TerrainGen.Color" /> class.</summary>
      <param name="r">
Красная компонента цвета. Число от 0 до 1</param>
      <param name="g">
Зеленая компонента цвета. Число от 0 до 1</param>
      <param name="b">
Синяя компонента цвета. Число от 0 до 1</param>
      <param name="a">
Прозрачность. Значение по-умолчанию 1f.</param>
    </member>
    <member name="M:TerrainGen.Color.ToArray">
      <summary>
Возвращает цвет как массив чисел с плавающей точкой</summary>
      <returns>
Массив из 4 элементов (r, g, b, a)</returns>
    </member>
    <member name="M:TerrainGen.Color.op_implicit(TerrainGen.Color)~System.Single">
      <summary>
Задает неявное преобразование цвета в массив чисел с плавающей точкой</summary>
      <param name="c">
Цвет, который необходимо преобразовать</param>
    </member>
    <member name="M:TerrainGen.Color.op_implicit(System.Single[])~TerrainGen.Color">
      <summary>
Задает неявное преобразование массива чисел с плавающей точкой в экземпляр класса <see cref="T:TerrainGen.Color" /></summary>
      <param name="arr">
Массив из 3 или 4 элементов, где первый элемент суть красная компонента, второй -- зеленая, третий -- синяя, четвертая -- прозрачность. Если прозрачность не задана, то принимается равной единице</param>
    </member>
    <member name="T:TerrainGen.Serialization.SerializeWriter">
    </member>
    <member name="M:TerrainGen.Serialization.SerializeWriter.#ctor(dynamic)">
      <summary>
Инициализирует новый объект сериализатора <see cref="T:TerrainGen.Serialization.SerializeWriter" /></summary>
      <param name="writer">
Объект любого типа, в котором реализованы методы Write() с перегрузками для основных типов данных и Close()</param>
    </member>
    <member name="M:TerrainGen.Serialization.SerializeWriter.Open">
      <summary>
Открывает файл, в соответствии с предназначением класса: для десериализации на чтение, для сериализации -- на запись</summary>
      <returns>
<para><b>true</b>, если открытие прошло успешно;</para> <para><b>false</b> в противном случае</para></returns>
    </member>
    <member name="M:TerrainGen.Serialization.SerializeWriter.Close">
      <summary>
Обеспечивает корректное закрытие файла</summary>
      <remarks>
Метод всегда завершается успешно, но для единообразия сигнатур возвращает bool</remarks>
      <returns>
true</returns>
    </member>
    <member name="M:TerrainGen.Serialization.SerializeWriter.InOut(System.String@)">
      <summary>
Обеспечивает ввод (вывод) строки в (из) объект (де)сериализатора</summary>
      <remarks>
Для этой перегрузки всегда возвращается <b>true</b>. Возможно возвращение <b>false</b> в случае возникновения исключений.</remarks>
      <returns>
<para>При сериализации всегда <b>true</b></para> <para>При десериализации <b>true</b>, если удалось получить строку, и <b>false</b> в противном случае</para></returns>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Boolean@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Double@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Single@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Int32@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(TerrainGen.Serialization.SpecialChars)">
InOut</seealso>
      <param name="str">
Строка, значение которой будет считано при сериализации, либо записано при десериализации</param>
    </member>
    <member name="M:TerrainGen.Serialization.SerializeWriter.InOut(System.Int32@)">
      <summary>
Обеспечивает ввод объекта типа Int32 в  объект сериализатора</summary>
      <returns>
true</returns>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Boolean@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Double@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Single@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.String@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(TerrainGen.Serialization.SpecialChars)">
InOut</seealso>
      <param name="i">
Число целочисленного типа, значение которого будет считано при сериализации</param>
    </member>
    <member name="M:TerrainGen.Serialization.SerializeWriter.InOut(System.Double@)">
      <summary>
Обеспечивает ввод объекта типа Double в объект сериализатора</summary>
      <returns>
true</returns>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Boolean@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Int32@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Single@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.String@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(TerrainGen.Serialization.SpecialChars)">
InOut</seealso>
      <param name="d">
Число с плавающей точкой двойной точности, значение которого будет считано при сериализации</param>
    </member>
    <member name="M:TerrainGen.Serialization.SerializeWriter.InOut(System.Single@)">
      <summary>
Обеспечивает ввод объекта типа Single в  объект сериализатора</summary>
      <returns>
true</returns>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Boolean@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Double@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Int32@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.String@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(TerrainGen.Serialization.SpecialChars)">
InOut</seealso>
      <param name="f">
Число с плавающей точкой, значение которого будет считано при сериализации</param>
    </member>
    <member name="M:TerrainGen.Serialization.SerializeWriter.InOut(System.Boolean@)">
      <summary>
Обеспечивает ввод булева значения в  объект сериализатора</summary>
      <returns>
true</returns>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Int32@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Double@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Single@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.String@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(TerrainGen.Serialization.SpecialChars)">
InOut</seealso>
      <param name="b">
Переменная типа bool, значение которой будет считано при сериализации</param>
    </member>
    <member name="M:TerrainGen.Serialization.SerializeWriter.InOut(TerrainGen.Serialization.SpecialChars)">
      <summary>
Обеспечивает ввод специальных маркеров в  объект сериализатора</summary>
      <returns>
true</returns>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Boolean@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Double@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Single@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.String@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Int32@)">
InOut</seealso>
      <param name="ch">
Маркер, являющийся элементом перечесления <see cref="SpecialChars" />, значение которого будет считано при сериализации</param>
    </member>
    <member name="M:TerrainGen.Serialization.SerializeWriter.WriteName(System.String)">
      <summary>
Записывает указанную строку в сериализатор</summary>
      <param name="name">
Строка, которая будет записана</param>
    </member>
    <member name="T:TerrainGen.Serialization.JsonDeserializer">
      <summary>
Предоставляет методы для чтения файлов настроек в формате JSON</summary>
      <seealso cref="T:TerrainGen.Serialization.BinaryDeserializer">
BinaryDeserializer</seealso>
      <seealso cref="T:TerrainGen.Serialization.JsonSerializer">
JsonSerializer</seealso>
    </member>
    <member name="M:TerrainGen.Serialization.JsonDeserializer.#ctor(System.String)">
      <summary>
Initializes a new instance of the <see cref="T:TerrainGen.Serialization.JsonDeserializer" /> class.</summary>
      <param name="filename">
Путь к файлу с настройками</param>
    </member>
    <member name="M:TerrainGen.Serialization.JsonDeserializer.Open">
      <summary>
Открывает файл, указанный в конструкторе</summary>
      <returns>
<para><b>true</b></para></returns>
    </member>
    <member name="M:TerrainGen.Serialization.JsonDeserializer.Close">
      <summary>
Закрывает поток</summary>
      <returns>
<b>true</b></returns>
    </member>
    <member name="M:TerrainGen.Serialization.JsonDeserializer.InOut(System.String@)">
      <summary>
Обеспечивает вывод строки из объекта десериализатора</summary>
      <returns>
<para><b>true</b>, если удалось получить строку, и <b>false</b>, если достигнут конец файла</para></returns>
      <param name="str">
Строка, в которую будет записано значение</param>
    </member>
    <member name="M:TerrainGen.Serialization.JsonDeserializer.InOut(System.Int32@)">
      <summary>
Обеспечивает вывод типа Int32 из объекта десериализатора</summary>
      <returns>
<para><b>true</b>, если удалось получить число, и <b>false</b>, если достигнут конец файла либо строка не является представлением числа</para></returns>
      <param name="i">
Число, в которую будет записано значение</param>
    </member>
    <member name="M:TerrainGen.Serialization.JsonDeserializer.InOut(System.Double@)">
      <summary>
Обеспечивает вывод типа Double из объекта десериализатора</summary>
      <returns>
<para><b>true</b>, если удалось получить число, и <b>false</b>, если достигнут конец файла либо строка не является представлением числа</para></returns>
      <param name="d">
Число, в которую будет записано значение</param>
    </member>
    <member name="M:TerrainGen.Serialization.JsonDeserializer.InOut(System.Single@)">
      <returns>
<para><b>true</b>, если удалось получить число, и <b>false</b>, если достигнут конец файла либо строка не является представлением числа</para></returns>
      <param name="f">
Число, в которую будет записано значение</param>
    </member>
    <member name="M:TerrainGen.Serialization.JsonDeserializer.InOut(System.Boolean@)">
      <summary>
Обеспечивает вывод типа Boolean из объекта десериализатора</summary>
      <returns>
<para><b>true</b>, если удалось получить значение, и <b>false</b>, если достигнут конец файла либо строка не является представлением булева значения</para></returns>
      <param name="b">
Число, в которую будет записано значение</param>
    </member>
    <member name="M:TerrainGen.Serialization.JsonDeserializer.InOut(TerrainGen.Serialization.SpecialChars,System.Boolean)">
      <summary>
Проверяет, является ли текущая строка представлением специального маркера</summary>
      <returns>
<para><b>true</b>, если маркеры совпадают, и <b>false</b>, если достигнут конец файла либо маркеры не совпадают</para></returns>
      <param name="ch">
Специальный маркер, на соответствие которому необходимо проверить текущую строку</param>
      <param name="delete">
Если <b>true</b>, удаляет маркер, иначе оставляет его для последующего чтения</param>
    </member>
    <member name="M:TerrainGen.Serialization.JsonDeserializer.TestCurrentSpecialChar">
      <summary>
Возвращает текущий специальный маркер</summary>
    </member>
    <member name="T:TerrainGen.Serialization.SpecialChars">
      <summary>
Представляет специальные символы, используемые для сериализации</summary>
    </member>
    <member name="F:TerrainGen.Serialization.SpecialChars.Null">
      <summary>
Пустой символ</summary>
    </member>
    <member name="F:TerrainGen.Serialization.SpecialChars.Delimiter">
      <summary>
Разделитель записей</summary>
    </member>
    <member name="F:TerrainGen.Serialization.SpecialChars.ArrayStart">
      <summary>
Маркер начала массива</summary>
    </member>
    <member name="F:TerrainGen.Serialization.SpecialChars.ArrayEnd">
      <summary>
Маркер конца массива</summary>
    </member>
    <member name="F:TerrainGen.Serialization.SpecialChars.ObjectStart">
      <summary>
Маркер начала объекта</summary>
    </member>
    <member name="F:TerrainGen.Serialization.SpecialChars.ObjectEnd">
      <summary>
Маркер конца объекта</summary>
    </member>
    <member name="T:TerrainGen.Serialization.ISerializer">
      <summary>
Предоставляет основные методы для сериализации</summary>
      <remarks>
<para><b>Запрещается</b> наследование этого интерфейса напрямую. Следует унаследовать <see cref="T:TerrainGen.Serialization.SerializeWriter" /> для сериализаторов и <see cref="T:TerrainGen.Serialization.SerializeReader" /> для десериализаторов.</para> <para>В случае явной реализации этого интерфейса следует исправить метод <see cref="M:TerrainGen.Settings.Serialize(TerrainGen.Serialization.ISerializer)" /> так, чтобы он корректно принимал экземпляры классов, реализующих интерфейс</para></remarks>
      <seealso cref="N:TerrainGen.Serialization">
TerrainGen.Serialization</seealso>
      <seealso cref="T:TerrainGen.Serialization.SerializeWriter">
SerializeWriter</seealso>
      <seealso cref="T:TerrainGen.Serialization.SerializeReader">
SerializeReader</seealso>
      <seealso cref="M:TerrainGen.Settings.Serialize(TerrainGen.Serialization.ISerializer)">
Serialize</seealso>
    </member>
    <member name="M:TerrainGen.Serialization.ISerializer.Open">
      <summary>
Открывает файл, в соответствии с предназначением класса: для десериализации на чтение, для сериализации -- на запись</summary>
      <returns>
<para><b>true</b>, если открытие прошло успешно;</para> <para><b>false</b> в противном случае</para></returns>
    </member>
    <member name="M:TerrainGen.Serialization.ISerializer.Close">
      <summary>
Обеспечивает корректное закрытие файла</summary>
      <remarks>
Метод всегда завершается успешно, но для единообразия сигнатур возвращает bool</remarks>
      <returns>
true</returns>
    </member>
    <member name="M:TerrainGen.Serialization.ISerializer.InOut(System.String@)">
      <summary>
Обеспечивает ввод (вывод) строки в (из) объект (де)сериализатора</summary>
      <remarks>
Для этой перегрузки всегда возвращается <b>true</b>. Возможно возвращение <b>false</b> в случае возникновения исключений.</remarks>
      <returns>
<para>При сериализации всегда <b>true</b></para> <para>При десериализации <b>true</b>, если удалось получить строку, и <b>false</b> в противном случае</para></returns>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Boolean@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Double@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Single@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Int32@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(TerrainGen.Serialization.SpecialChars)">
InOut</seealso>
      <param name="str">
Строка, значение которой будет считано при сериализации, либо записано при десериализации</param>
    </member>
    <member name="M:TerrainGen.Serialization.ISerializer.InOut(System.Int32@)">
      <summary>
Обеспечивает ввод (вывод) объекта типа Int32 в (из) объект(а) (де)сериализатора</summary>
      <returns>
<para>При сериализации всегда <b>true</b></para> <para>При десериализации <b>true</b>, если текущим элементом в десереализаторе является число или объект, который можно привести к числу целочисленного типа, и <b>false</b> в противном случае</para></returns>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Boolean@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Double@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Single@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.String@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(TerrainGen.Serialization.SpecialChars)">
InOut</seealso>
      <param name="i">
Число целочисленного типа, значение которого будет считано при сериализации, либо записано при десериализации</param>
    </member>
    <member name="M:TerrainGen.Serialization.ISerializer.InOut(System.Double@)">
      <summary>
Обеспечивает ввод (вывод) объекта типа Double в (из) объект(а) (де)сериализатора</summary>
      <returns>
<para>При сериализации всегда <b>true</b></para> <para>При десериализации <b>true</b>, если текущим элементом в десереализаторе является число или объект, который можно привести к числу типа Double, и <b>false</b> в противном случае</para></returns>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Boolean@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Int32@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Single@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.String@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(TerrainGen.Serialization.SpecialChars)">
InOut</seealso>
      <param name="d">
Число с плавающей точкой двойной точности, значение которого будет считано при сериализации, либо записано при десериализации</param>
    </member>
    <member name="M:TerrainGen.Serialization.ISerializer.InOut(System.Single@)">
      <summary>
Обеспечивает ввод (вывод) объекта типа Single в (из) объект(а) (де)сериализатора</summary>
      <returns>
<para>При сериализации всегда <b>true</b></para> <para>При десериализации <b>true</b>, если текущим элементом в десереализаторе является число или объект, который можно привести к числу типа Single, и <b>false</b> в противном случае</para></returns>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Boolean@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Double@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Int32@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.String@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(TerrainGen.Serialization.SpecialChars)">
InOut</seealso>
      <param name="f">
Число с плавающей точкой, значение которого будет считано при сериализации, либо записано при десериализации</param>
    </member>
    <member name="M:TerrainGen.Serialization.ISerializer.InOut(System.Boolean@)">
      <summary>
Обеспечивает ввод (вывод) булева значения в (из) объект(а) (де)сериализатора</summary>
      <returns>
<para>При сериализации всегда <b>true</b></para> <para>При десериализации <b>true</b>, если текущим элементом в десереализаторе является булево значение, либо строка, значение которой можно интепретировать как булево значение, и <b>false</b> в противном случае</para></returns>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Int32@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Double@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Single@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.String@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(TerrainGen.Serialization.SpecialChars)">
InOut</seealso>
      <param name="b">
Переменная типа bool, значение которой будет считано при сериализации, либо записано при десериализации</param>
    </member>
    <member name="M:TerrainGen.Serialization.ISerializer.InOut(TerrainGen.Serialization.SpecialChars)">
      <summary>
Обеспечивает ввод (вывод) специальных маркеров в (из) объект(а) (де)сериализатора</summary>
      <returns>
<para>При сериализации всегда <b>true</b></para> <para>При десериализации <b>true</b>, если текущим элементом в десереализаторе является указанный (а не любой) маркер, и <b>false</b> в противном случае</para></returns>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Boolean@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Double@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Single@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.String@)">
InOut</seealso>
      <seealso cref="M:TerrainGen.Serialization.ISerializer.InOut(System.Int32@)">
InOut</seealso>
      <param name="ch">
Маркер, являющийся элементом перечесления <see cref="SpecialChars" />, значение которого будет считано при сериализации, либо записано при десериализации</param>
    </member>
    <member name="T:TerrainGen.CommonHelper">
      <summary>
Предоставляет методы-помощники общего назначения</summary>
    </member>
    <member name="M:TerrainGen.CommonHelper.GenerateNormalMap(System.Single[0:,0:])">
      <summary>
Генерирует карту нормалей на основе заданной карты высот</summary>
      <returns>
Двумерный массив векторов. Каждой вершине в соответствие ставится трехмерный вектор нормали</returns>
      <param name="hMap">
Карта высот, полученная от <see cref="M:TerrainGen.HeightMap.IHeightMap.GetMap" /></param>
    </member>
    <member name="T:TerrainGen.Point3D">
      <summary>
Представляет точку в трехмерном пространстве</summary>
    </member>
    <member name="P:TerrainGen.Point3D.X">
      <summary>
Получает или задает позицию по ширине</summary>
    </member>
    <member name="P:TerrainGen.Point3D.Z">
      <summary>
Получает или задает позицию по глубине (вдаль)</summary>
    </member>
    <member name="P:TerrainGen.Point3D.H">
      <summary>
Получает или задает позицию по высоте</summary>
    </member>
    <member name="M:TerrainGen.Point3D.#ctor(System.Int32,System.Int32,System.Single)">
      <summary>
Initializes a new instance of the <see cref="T:TerrainGen.Point3D" /> class.</summary>
      <param name="x">
Положение по ширине</param>
      <param name="z">
Положение по глубине</param>
      <param name="h">
Положение по высоте</param>
    </member>
    <member name="T:TerrainGen.Boundary">
      <summary>
Представляет объем, описывающий некоторую область в пространстве</summary>
      <remarks>
В этой реализации является квадратным столбом без нижней и верхней границ (можно считать их бесконечно далекими)</remarks>
    </member>
    <member name="M:TerrainGen.Boundary.#ctor(TerrainGen.Point3D,System.Int32)">
      <summary>
Initializes a new instance of the <see cref="T:TerrainGen.Boundary" /> class.</summary>
      <param name="point">
Точка, задающая левый нижний угол квадрата</param>
      <param name="rad">
Сторона квадрата</param>
    </member>
    <member name="M:TerrainGen.Boundary.#ctor(System.Int32,System.Int32,System.Single,System.Int32)">
      <param name="x">
</param>
      <param name="z">
</param>
      <param name="h">
</param>
      <param name="rad">
</param>
    </member>
    <member name="P:TerrainGen.Boundary.Point">
      <summary>
Левый нижний угол</summary>
    </member>
    <member name="P:TerrainGen.Boundary.Rad">
      <summary>
Длина стороны квадрата</summary>
    </member>
    <member name="M:TerrainGen.Boundary.ContainsPoint(TerrainGen.Point3D)">
      <summary>
Проверяет, содержится ли точка в текущем объеме</summary>
      <param name="p">
</param>
    </member>
    <member name="T:TerrainGen.QuadTree">
      <summary>
Представляет квадродерево</summary>
      <remarks>
Основная черта квадродерева -- наличие у каждого элемента, не являющегося листом, 4 дочерних</remarks>
    </member>
    <member name="P:TerrainGen.QuadTree.Boundary">
      <summary>
Получает объем, ограничивающий данное дерево</summary>
    </member>
    <member name="P:TerrainGen.QuadTree.Level">
      <summary>
Получает уровень дерева. Чем больше уровень, тем меньшим объемом оно описывается</summary>
    </member>
    <member name="P:TerrainGen.QuadTree.Children">
      <summary>
Возвращает 4 потомков данного дерева</summary>
    </member>
    <member name="M:TerrainGen.QuadTree.#ctor(TerrainGen.Boundary,System.Single[0:,0:],System.Int32)">
      <summary>
Initializes a new instance of the <see cref="T:TerrainGen.QuadTree" /> class.</summary>
      <param name="boundary">
Объем, в котором находится создаваемое дерево</param>
      <param name="hMap">
Карта высот, чьими значениями будут заполняться вершины дерева</param>
      <param name="level">
Уровень дерева</param>
    </member>
    <member name="T:TerrainGen.HeightMap.IHeightMap">
      <summary>
Представляет карту высот</summary>
    </member>
    <member name="M:TerrainGen.HeightMap.IHeightMap.GetMap">
      <summary>
Возвращает карту высот</summary>
      <returns>
Карта высот в виде двумерного массива, значения лежат в промежутке [0; 255]</returns>
    </member>
    <member name="T:TerrainGen.Serialization.BinaryDeserializer">
      <summary>
Предоставляет методы для расшифровки бинарных файлов настроек</summary>
      <seealso cref="T:TerrainGen.Serialization.BinarySerializer">
BinarySerializer</seealso>
      <seealso cref="T:TerrainGen.Serialization.JsonDeserializer">
JsonDeserializer</seealso>
    </member>
    <member name="M:TerrainGen.Serialization.BinaryDeserializer.#ctor(System.String)">
      <summary>
Initializes a new instance of the <see cref="T:TerrainGen.Serialization.BinaryDeserializer" /> class.</summary>
      <param name="filename">
Путь к файлу с настройками</param>
    </member>
    <member name="M:TerrainGen.Serialization.BinaryDeserializer.Open">
      <summary>
Открывает файл, указанный в конструкторе</summary>
      <returns>
<para><b>true</b></para></returns>
      <exception cref="IOException">
Файл используется другим процессом</exception>
    </member>
    <member name="M:TerrainGen.Serialization.BinaryDeserializer.Close">
      <summary>
Закрывает поток</summary>
      <returns>
<b>true</b></returns>
    </member>
    <member name="M:TerrainGen.Serialization.BinaryDeserializer.InOut(System.String@)">
      <summary>
Обеспечивает вывод строки из объекта десериализатора</summary>
      <returns>
<para><b>true</b>, если удалось получить строку, и <b>false</b>, если достигнут конец файла</para></returns>
      <param name="str">
Строка, в которую будет записано значение</param>
    </member>
    <member name="M:TerrainGen.Serialization.BinaryDeserializer.InOut(System.Int32@)">
      <summary>
Обеспечивает вывод типа Int32 из объекта десериализатора</summary>
      <returns>
<para><b>true</b>, если удалось получить число, и <b>false</b>, если достигнут конец файла либо строка не является представлением числа</para></returns>
      <param name="i">
Число, в которую будет записано значение</param>
    </member>
    <member name="M:TerrainGen.Serialization.BinaryDeserializer.InOut(System.Double@)">
      <summary>
Обеспечивает вывод типа Double из объекта десериализатора</summary>
      <returns>
<para><b>true</b>, если удалось получить число, и <b>false</b>, если достигнут конец файла либо строка не является представлением числа</para></returns>
      <param name="d">
Число, в которую будет записано значение</param>
    </member>
    <member name="M:TerrainGen.Serialization.BinaryDeserializer.InOut(System.Single@)">
      <summary>
Обеспечивает вывод типа Single из объекта десериализатора</summary>
      <returns>
<para><b>true</b>, если удалось получить число, и <b>false</b>, если достигнут конец файла либо строка не является представлением числа</para></returns>
      <param name="f">
Число, в которую будет записано значение</param>
    </member>
    <member name="M:TerrainGen.Serialization.BinaryDeserializer.InOut(System.Boolean@)">
      <summary>
Обеспечивает вывод типа Boolean из объекта десериализатора</summary>
      <returns>
<para><b>true</b>, если удалось получить значение, и <b>false</b>, если достигнут конец файла либо строка не является представлением булева значения</para></returns>
      <param name="b">
Число, в которую будет записано значение</param>
    </member>
    <member name="M:TerrainGen.Serialization.BinaryDeserializer.InOut(TerrainGen.Serialization.SpecialChars,System.Boolean)">
      <summary>
Проверяет, является ли текущая строка представлением специального маркера</summary>
      <returns>
<para><b>true</b>, если маркеры совпадают, и <b>false</b>, если достигнут конец файла либо маркеры не совпадают</para></returns>
      <param name="ch">
Специальный маркер, на соответствие которому необходимо проверить текущую строку</param>
      <param name="delete">
Если <b>true</b>, удаляет маркер, иначе оставляет его для последующего чтения</param>
    </member>
    <member name="M:TerrainGen.Serialization.BinaryDeserializer.TestCurrentSpecialChar">
      <summary>
Возвращает текущий специальный маркер</summary>
    </member>
    <member name="N:TerrainGen.Properties">
    </member>
    <member name="T:TerrainGen.Properties.Settings">
    </member>
    <member name="P:TerrainGen.Properties.Settings.Default">
    </member>
    <member name="T:TerrainGen.HeightMap.HillModel">
      <summary>
Представляет карту высот, сгенерированную по "hill algorithm"</summary>
      <remarks>
Не рекомендуется использовать этот класс, карта получается слишком гористая</remarks>
    </member>
    <member name="M:TerrainGen.HeightMap.HillModel.#ctor(TerrainGen.Settings)">
      <summary>
Генерирует новую карту высот с заданными настройками</summary>
      <param name="s">
<para>Настройки, по которым строится карта высот. Необходимы значения:</para> <list type="bullet"><item><description>int width -- ширина карты</description></item><item><description>int height -- глубина карты</description></item><item><description>int seed -- зерно генератора псевдослучайных последовательностей</description></item><item><description>int waterlevel -- уровень воды</description></item></list></param>
    </member>
    <member name="M:TerrainGen.HeightMap.HillModel.GetMap">
      <summary>
Возвращает карту высот</summary>
      <returns>
Карта высот в виде двумерного массива, значения лежат в промежутке [0; 255]</returns>
    </member>
    <member name="M:TerrainGen.AdvancedOptionsForm.Dispose(System.Boolean)">
      <summary>
Clean up any resources being used.</summary>
      <param name="disposing">
true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:TerrainGen.Scene">
      <summary>
Представляет основной объект отрисовки</summary>
    </member>
    <member name="P:TerrainGen.Scene.Settings">
      <summary>
Получает настройки сцены</summary>
    </member>
    <member name="M:TerrainGen.Scene.#ctor">
      <summary>
Загружает новую сцену с настройками по умолчанию</summary>
    </member>
    <member name="M:TerrainGen.Scene.#ctor(TerrainGen.Settings[])">
      <summary>
Загружает новую сцену с указанными настройкам</summary>
      <remarks>
<para>Если есть несколько объектов настройки, то не обязательно сначала сливать их в один объект можно вызывать </para> <code lang="C#">new Settings(set1, set2, set3, ...);</code> <para>причем, если у нескольких объектов будут совпадающие имена настроек, то в итоге будет записано то, которое шло последним</para></remarks>
      <param name="settings">
Настройки сцены</param>
    </member>
    <member name="M:TerrainGen.Scene.AddSettings(TerrainGen.Settings[])">
      <summary>
Обновляет некоторые настройки</summary>
      <param name="settings">
Настройки, которые нуждаются в обновлении</param>
    </member>
    <member name="P:TerrainGen.Scene.Camera">
      <summary>
Получает объект камеры</summary>
      <remarks>
Задать вторую и более камеру невозможно</remarks>
    </member>
    <member name="M:TerrainGen.Scene.Init">
      <summary>
Инициализирует сцену, подготавливая ее к отрисовке.</summary>
      <remarks>
Этот метод необходимо один раз после создания объекта, но до вызова <see cref="M:TerrainGen.Scene.Render" /></remarks>
    </member>
    <member name="M:TerrainGen.Scene.Render">
      <summary>
Отрисовывает сцену</summary>
      <remarks>
Необходимо вызывать этот метод каждый раз, как требуется перерисовка сцены</remarks>
    </member>
    <member name="T:TerrainGen.ColorDescription">
      <summary>
Представляет описание цвета при сериализации</summary>
    </member>
    <member name="P:TerrainGen.ColorDescription.Color">
      <summary>
Получает или задает цвет ландшафта</summary>
    </member>
    <member name="P:TerrainGen.ColorDescription.Level">
      <summary>
Получает или задает уровень, на котором действие этого цвета прекращается</summary>
      <remarks>
Если есть два цвета, уровни которых заданы как x и y соответсвенно, то ландшафт будет краситься первым цветом на высотах от 0 до х, и вторым на высотах от х до у. Поэтому необходим цвет, уровень которого задан как 255, иначе неизвестно, каким цветом красить верхний слой ландшафта.</remarks>
    </member>
    <member name="P:TerrainGen.ColorDescription.Comment">
      <summary>
Получает или задает комментарий к данному описанию.</summary>
      <remarks>
Используется для сериализации и в форме настроек цветов, на самом ландшафте никак не отображается</remarks>
    </member>
    <member name="M:TerrainGen.MainForm.#ctor">
    </member>
    <member name="M:TerrainGen.MainForm.RegisterAdvancedSettings(TerrainGen.Settings,TerrainGen.Settings)">
      <param name="specialVars">
</param>
      <param name="colors">
</param>
    </member>
    <member name="T:TerrainGen.Serialization.BinarySerializer">
      <summary>
Предоставляет методы для сохранения файлов настроек в бинарном виде</summary>
      <seealso cref="T:TerrainGen.Serialization.BinaryDeserializer">
BinaryDeserializer</seealso>
      <seealso cref="T:TerrainGen.Serialization.JsonSerializer">
JsonSerializer</seealso>
    </member>
    <member name="M:TerrainGen.Serialization.BinarySerializer.#ctor(System.String)">
      <summary>
Initializes a new instance of the <see cref="T:TerrainGen.Serialization.BinarySerializer" /> class.</summary>
      <param name="filename">
Путь к файлу, в который будет производиться сохранение данных</param>
      <exception cref="IOException">
Файл используется другим процессом</exception>
    </member>
    <member name="M:TerrainGen.Serialization.BinarySerializer.Open">
      <summary>
Производит открытие файла</summary>
      <remarks>
Формальная реализация интерфейса</remarks>
      <returns>
<b>true</b></returns>
    </member>
    <member name="M:TerrainGen.Serialization.BinarySerializer.Close">
      <summary>
Обеспечивает корректное закрытие файла</summary>
      <returns>
true</returns>
    </member>
    <member name="M:TerrainGen.Serialization.BinarySerializer.InOut(System.String@)">
      <summary>
Обеспечивает запись строки</summary>
      <returns>
<b>true</b>, если запись прошла успешно, <b>false</b> в противном случае</returns>
      <param name="str">
Строка, значение которой будет записано</param>
    </member>
    <member name="M:TerrainGen.Serialization.BinarySerializer.InOut(System.Int32@)">
      <summary>
Обеспечивает запись числа целочисленного типа</summary>
      <returns>
<b>true</b>, если запись прошла успешно, <b>false</b> в противном случае</returns>
      <param name="i">
Число, значение которого будет записано</param>
    </member>
    <member name="M:TerrainGen.Serialization.BinarySerializer.InOut(System.Double@)">
      <summary>
Обеспечивает запись числа с плавающей точкой двойной точности</summary>
      <returns>
<b>true</b>, если запись прошла успешно, <b>false</b> в противном случае</returns>
      <param name="d">
Число, значение которого будет записано</param>
    </member>
    <member name="M:TerrainGen.Serialization.BinarySerializer.InOut(System.Single@)">
      <summary>
Обеспечивает запись числа с плавающей точкой</summary>
      <returns>
<b>true</b>, если запись прошла успешно, <b>false</b> в противном случае</returns>
      <param name="f">
Число, значение которого будет записано</param>
    </member>
    <member name="M:TerrainGen.Serialization.BinarySerializer.InOut(System.Boolean@)">
      <summary>
Обеспечивает запись булева значения</summary>
      <returns>
<b>true</b>, если запись прошла успешно, <b>false</b> в противном случае</returns>
      <param name="b">
Значение, которое необходимо записать</param>
    </member>
    <member name="M:TerrainGen.Serialization.BinarySerializer.InOut(TerrainGen.Serialization.SpecialChars)">
      <summary>
Обеспечивает запись одного из специальных маркеров</summary>
      <returns>
<b>true</b>, если запись прошла успешно, <b>false</b> в противном случае</returns>
      <param name="ch">
Маркер, который нужно записать</param>
    </member>
    <member name="M:TerrainGen.Serialization.BinarySerializer.WriteName(System.String)">
      <summary>
Записывает указанную строку</summary>
      <returns>
<b>true</b>, если запись прошла успешно, <b>false</b> в противном случае</returns>
      <param name="name">
Строка, которая будет записана</param>
    </member>
    <member name="T:TerrainGen.GlHelper">
      <summary>
Класс, предоставляющий методы, отвечающие за собственно вывод изображения на экран</summary>
    </member>
    <member name="M:TerrainGen.GlHelper.Prepare(System.Single[0:,0:],System.Single[][0:,0:])">
      <summary>
Подготавливает окружение к использованию указанной карты высот</summary>
      <remarks>
Этот метод следует вызывать каждый раз, как меняется карта высот (а вместе с ней и карта нормалей), но не каждый раз, как нужно отрисовать сцену</remarks>
      <param name="heightMap">
Карта высот</param>
      <param name="normalMap">
Карта нормалей, полученная с помощью <see cref="M:TerrainGen.CommonHelper.GenerateNormalMap(System.Single[0:,0:])" /></param>
    </member>
    <member name="M:TerrainGen.GlHelper.Draw(TerrainGen.Camera)">
      <summary>
Отрисовывает сцену с указанной камерой</summary>
      <remarks>
Этот метод необходимо вызывать каждый раз, как требуется перерисовка сцены. Внутри происходит обновление камеры, поэтому нет нужды делать это где-либо еще</remarks>
      <param name="cam">
Камера, настроенная необходимым образом</param>
    </member>
    <member name="M:TerrainGen.GlHelper.InitScene(TerrainGen.Settings)">
      <summary>
Метод инициализирует сцену с заданными настройками</summary>
      <remarks>
Необходимо снова вызвать этот метод при изменении настроек</remarks>
      <param name="settings">
<para>Настройки сцены. Необходимы следующие значения:</para> <list type="bullet"><item><description>int waterlevel -- уровень воды</description></item><item><description>int zoom -- размер ячейки</description></item><item><description>ColorDescription[] colors -- цвета ландшафта</description></item><item><description>Settings special_vars -- настройки, в свою очередь содержащие: <list type="bullet"><item><description>Color clear_color </description></item><item><description>float[] light_position </description></item><item><description>bool fog_enabled </description></item><item><description>Color fog_color </description></item><item><description>float fog_density</description></item><item><description>Color watercolor</description></item></list> </description></item></list></param>
    </member>
    <member name="M:TerrainGen.GlHelper.InitGL(System.Int32,System.Int32)">
      <summary>
Инициализирует окружение OpenGL. Необходим вызов один раз за программу, до начала любого рисования</summary>
      <param name="width">
Ширина окна, в которое выводится изображение</param>
      <param name="height">
Высота окна, в которое выводится изображение</param>
    </member>
    <member name="T:TerrainGen.Properties.Resources">
      <summary>
A strongly-typed resource class, for looking up localized strings, etc.</summary>
    </member>
    <member name="M:TerrainGen.Properties.Resources.#ctor">
    </member>
    <member name="P:TerrainGen.Properties.Resources.ResourceManager">
      <summary>
Returns the cached ResourceManager instance used by this class.</summary>
    </member>
    <member name="P:TerrainGen.Properties.Resources.Culture">
      <summary>
Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class.</summary>
    </member>
  </members>
</doc>
